package com.sillylife.realchat.views.fragmentsimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.lifecycle.ViewModelProvidersimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.SimpleItemAnimatorimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.sillylife.realchat.Rimport com.sillylife.realchat.constants.BundleConstantsimport com.sillylife.realchat.models.Conversationimport com.sillylife.realchat.models.Userimport com.sillylife.realchat.views.adapters.ConversationAdapterimport com.sillylife.realchat.views.module.ConversationFragmentModuleimport com.sillylife.realchat.views.viewmodel.ConversationFragmentViewModelimport com.sillylife.realchat.views.viewmodelfactory.FragmentViewModelFactoryimport kotlinx.android.synthetic.main.fragment_conversation.*class ConversationFragment : BaseFragment(), ConversationFragmentModule.IModuleListener {    override fun onCancelled(databaseError: DatabaseError) {    }    override fun onChildAdded(dataSnapshot: DataSnapshot, hasMore: Boolean?) {        if (dataSnapshot.exists()) {            val message = dataSnapshot.getValue<Conversation>(Conversation::class.java)            itemPos++            if (hasMore!!) {                if (!mPrevKey.equals(dataSnapshot.key)) {                    list.add(message!!)                } else {                    if (!mPrevKey.equals(mLastKey)){                        mPrevKey = mLastKey                        list.add(message!!)                        adapter?.addMoreData(list, true)                    }                }                if (itemPos == 1) {                    mLastKey = dataSnapshot.key                }            } else {                if (itemPos == 1) {                    mLastKey = dataSnapshot.key                    mPrevKey = dataSnapshot.key                }                if (itemPos == totalNoItemsToLoad) {                    list.add(message!!)                    adapter?.addData(list, true)                } else {                    list.add(message!!)                }            }            adapter?.notifyDataSetChanged()        }    }    override fun onChildChanged(dataSnapshot: DataSnapshot) {    }    override fun onChildMoved(dataSnapshot: DataSnapshot) {    }    override fun onChildRemoved(dataSnapshot: DataSnapshot) {    }    companion object {        fun newInstance(user: User?): ConversationFragment {            val fragment = ConversationFragment()            val args = Bundle()            if (user != null) {                args.putParcelable(BundleConstants.USER, user)            }            fragment.arguments = args            return fragment        }        val TAG = ConversationFragment::class.java.simpleName    }    private lateinit var viewModel: ConversationFragmentViewModel    private var user: User? = null    private var pageNo: Int? = 1    private var totalNoItemsToLoad: Int? = 10    private var itemPos = 0    private var mLastKey: String? = null    private var mPrevKey: String? = null    private var adapter: ConversationAdapter? = null    private val list = ArrayList<Conversation>()    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {        return inflater.inflate(R.layout.fragment_conversation, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel = ViewModelProviders.of(this, FragmentViewModelFactory(this@ConversationFragment))                .get(ConversationFragmentViewModel::class.java)        if (arguments != null && arguments?.containsKey(BundleConstants.USER)!!) {            user = arguments?.getParcelable(BundleConstants.USER)            userId.text = user?.userId        }        viewModel.getConversationData(pageNo!! * totalNoItemsToLoad!!, "", false, user?.userId)        setAdapter()    }    private fun setAdapter() {        if (rcv.adapter == null) {            val layoutManager = LinearLayoutManager(activity)            layoutManager.stackFromEnd = false            layoutManager.reverseLayout = true            //rcv.addItemDecoration(EpisodeAdapter.ProfileEpisodeItemDecoration(0, CommonUtil.dpToPx(20), CommonUtil.dpToPx(90), 0, CommonUtil.dpToPx(20)))            rcv.layoutManager = layoutManager            (rcv.itemAnimator as SimpleItemAnimator).supportsChangeAnimations = false            adapter = ConversationAdapter(context!!) {                if (it is Int) {                    pageNo = it                    itemPos = 0                    list.clear()                    viewModel.getConversationData(totalNoItemsToLoad!!, mLastKey!!, true, user?.userId)                }            }            rcv.adapter = adapter            rcv.setHasFixedSize(true)        }    }    override fun onDestroy() {        super.onDestroy()        viewModel.onDestroy()    }}